///$tab Change Log
/*
1.0.2 - 31/01/14
----------------
* Now only loads distinct ids.
* Reviewed and tested against QVSource 1.4.5.1 (requires this version or later).
* Now includes following (friends) functionality also.

1.0.1 - 04/12/13
----------------
* Added badge.

1.0.0 - 04/09/13
----------------
* Initial version.
*/
///$tab Setup
SET ThousandSep=',';
SET DecimalSep='.';
SET MoneyThousandSep=',';
SET MoneyDecimalSep='.';
SET MoneyFormat='£#,##0.00;-£#,##0.00';
SET TimeFormat='hh:mm:ss';
SET DateFormat='DD/MM/YYYY';
SET TimestampFormat='DD/MM/YYYY hh:mm:ss[.fff]';
SET MonthNames='Jan;Feb;Mar;Apr;May;Jun;Jul;Aug;Sep;Oct;Nov;Dec';
SET DayNames='Mon;Tue;Wed;Thu;Fri;Sat;Sun';

// The account we want to get all follower ids for.
let vUserName = 'qvsource';

// Can be anything you like to distinguish this app from other apps which might 
// be reloading at the same time.
let vAppId = 'testapp';

// A stamp to identify a request. The only thing you need to be careful 
// of is if you have multiple reloads happening on the same machine in 
// parallel of the same table then this needs to be unique between these
// requests.
let vRequestStamp = 'myUniqueStamp';


let vQVSourcePort = '5555';

sub CheckQVSourceStatus

	set errormode = 0;

	QVSourceStatus:
	LOAD Version,
		SubField(Version, '.', 1) as Version_Major,
		SubField(Version, '.', 2) as Version_Minor,
		SubField(Version, '.', 3) as Version_Build,
		SubField(Version, '.', 4) as Version_Revision,
		ServerMode,
		Path,
		Licensed,
		LicenseExpires,
		IsLicensedAsServer
	FROM [http://localhost:$(vQVSourcePort)/QVSource?format=xml] (XmlSimple, Table is [QVSource]);
         
	if(ScriptError <> '') then   
		//
		// Looks like QVSOurce is not even running.
		//
		// Log message here or send email using QVSource Notifier Connector
		//
		trace 'QVSource is not running or not running on the requested port number.';
		exit script;
	endif

	if(peek('ServerMode', 0, 'QVSourceStatus') = 'true' and peek('IsLicensedAsServer', 0, 'QVSourceStatus') <> 'true') then
		//
		// QVSource is running but not licensed to run in server mode.
		//
		// Log message here or send email using QVSource Notifier Connector
		//
		trace 'QVSource is running but not licensed to run in server mode.';
		exit script;
	endif     
     
	if(peek('Licensed', 0, 'QVSourceStatus') <> 'true') then
		//
		// QVSource is running but not licensed.
		//
		// Log message here or send email using QVSource Notifier Connector
		//
		trace 'QVSource is running but not licensed.';
		exit script;
	endif
    
	let currentVersionAsInt = (peek('Version_Major', 0, 'QVSourceStatus') * 1000) + (peek('Version_Minor', 0, 'QVSourceStatus') * 100) + (peek('Version_Build', 0, 'QVSourceStatus') * 10) + peek('Version_Revision', 0, 'QVSourceStatus');
 
    if(currentVersionAsInt < 1451) then
        // Log message here or send email using QVSource Notifier Connector
        trace 'Version too low. Please update QVSource.';
        exit script;
    endif

//	QVSourceConnectorStatus:
//	LOAD Name as ConnectorName,
//	    Version as ConnectorVersion,
//	    Licensed as ConnectorLicensed
//	FROM [http://localhost:$(vQVSourcePort)/QVSource?format=xml] (XmlSimple, Table is [QVSource/Connectors/Connector]);

	//
	// Run other QVSource or connector specific tests here before deciding whether
	// to proceed and load the rest of the application.
	//

	drop table QVSourceStatus;
	//drop table QVSourceConnectorStatus;

	set errormode = 1;

endsub

call CheckQVSourceStatus
///$tab FollowerIds
// Assume we can load more followers
let vIsOK = 1;
let vNextCursor = '';

if not isnull(filesize('FollowerIds.qvd')) then
	FollowerIds:
	LOAD
	* 
	FROM 'FollowerIds.qvd' (qvd);
end if

if not isnull(filesize('Post_FollowerIds_Info.qvd')) then

	Post_FollowerIds_Info:
	LOAD
	* 
	FROM 'Post_FollowerIds_Info.qvd' (qvd);
	
	let vTmp = Peek('Post_FollowerIds_Info_utc_reset', 0, 'Post_FollowerIds_Info');
	let vNextAllowedRequest = timestamp#('$(vTmp)', 'DD-MM-YYYY hh:mm:ss');
	let vNextCursor = Peek('Post_FollowerIds_Info_next_cursor', 0, 'Post_FollowerIds_Info');
	
	let vIsOK = vNextAllowedRequest > utc();
	
	drop table Post_FollowerIds_Info;

end if

let vIsOK = 1;
IF(vIsOK <> -1) then

	IF(vNextCursor = '0') then
		trace 'Retrieved all available (next_cursor is zero)';
	ELSE
		FollowerIds:
		LOAD Distinct
			'$(vUserName)' as Following,
		    id as FollowerIds_id
		FROM
		[http://localhost:$(vQVSourcePort)/QVSource/TwitterConnectorV2/?table=FollowerIds&appID=$(vAppId)&userName=$(vUserName)&requestStamp=$(vRequestStamp)&cursor=$(vNextCursor)]
		(qvx);
	
		store FollowerIds into FollowerIds.qvd (qvd);
		
		Post_FollowerIds_Info:
		LOAD
			'$(vUserName)' as UserName,
			next_cursor as Post_FollowerIds_Info_next_cursor,
			was_rate_limited as Post_FollowerIds_Info_was_rate_limited,
			utc_reset as Post_FollowerIds_Info_utc_reset,
			seconds_to_reset as Post_FollowerIds_Info_seconds_to_reset
		FROM
		[http://localhost:$(vQVSourcePort)/QVSource/TwitterConnectorV2/?table=Post_FollowerIds_Info&appID=$(vAppId)&requestStamp=$(vRequestStamp)]
		(qvx);
		
		store Post_FollowerIds_Info into Post_FollowerIds_Info.qvd (qvd);
		
	ENDIF
	
ELSE
	trace 'Not able to get more ids at this point - next allowed at $(vNextAllowedRequest)';
ENDIF


let vIds = Concat(FollowerIds_id, 'a');
///$tab FriendIds
// Assume we can load more followers
let vIsOK = 1;
let vNextCursor = '';

if not isnull(filesize('FriendIds.qvd')) then
	FriendIds:
	LOAD
	* 
	FROM 'FriendIds.qvd' (qvd);
end if

if not isnull(filesize('Post_FriendIds_Info.qvd')) then

	Post_FriendIds_Info:
	LOAD
	* 
	FROM 'Post_FriendIds_Info.qvd' (qvd);
	
	let vTmp = Peek('Post_FriendIds_Info_utc_reset', 0, 'Post_FriendIds_Info');
	let vNextAllowedRequest = timestamp#('$(vTmp)', 'DD-MM-YYYY hh:mm:ss');
	let vNextCursor = Peek('Post_FriendIds_Info_next_cursor', 0, 'Post_FriendIds_Info');
	
	let vIsOK = vNextAllowedRequest > utc();
	
	drop table Post_FriendIds_Info;

end if


IF(vIsOK <> -1) then

	IF(vNextCursor = '0') then
		trace 'Retrieved all available (next_cursor is zero)';
	ELSE
		FriendIds:
		LOAD Distinct
			'$(vUserName)' as Friend,
		    id as FriendIds_id
		FROM
		[http://localhost:$(vQVSourcePort)/QVSource/TwitterConnectorV2/?table=FriendIds&appID=$(vAppId)&userName=$(vUserName)&requestStamp=$(vRequestStamp)&cursor=$(vNextCursor)]
		(qvx);
	
		store FriendIds into FriendIds.qvd (qvd);
		
		Post_FriendIds_Info:
		LOAD
			'$(vUserName)' as UserName,
			next_cursor as Post_FriendIds_Info_next_cursor,
			was_rate_limited as Post_FriendIds_Info_was_rate_limited,
			utc_reset as Post_FriendIds_Info_utc_reset,
			seconds_to_reset as Post_FriendIds_Info_seconds_to_reset
		FROM
		[http://localhost:$(vQVSourcePort)/QVSource/TwitterConnectorV2/?table=Post_FriendIds_Info&appID=$(vAppId)&requestStamp=$(vRequestStamp)]
		(qvx);
		
		store Post_FriendIds_Info into Post_FriendIds_Info.qvd (qvd);
		
	ENDIF
	
ELSE
	trace 'Not able to get more ids at this point - next allowed at $(vNextAllowedRequest)';
ENDIF

exit script;
///$tab User Lookup
// Working on this tab next.

//if not isnull(filesize('UserInfo.qvd')) then
//	UserInfo:
//	LOAD
//	* 
//	FROM 'UserInfo.qvd' (qvd);
//end if
//
//AllUserIds:
//load distinct
//FollowerIds_id as UserId
//resident
//FollowerIds;
//
//AllUserIds:
//load distinct
//FriendIds_id as UserId
//resident
//FriendIds;
//
//LET noRows = NoOfRows('AllUserIds');
//
//let concatenated = '';
//let currentCount = 0;
//
//if not IsNull(noRows) then
//	set errormode=0;
//	for i=0 to $(noRows)-1
//	
//		let account = Replace(peek('TwitterAccount',$(i),'TwitterAccountsToTrack'), '@', '');
//		
//		let grouping = peek('Grouping',$(i),'TwitterAccountsToTrack');
//		
//	  	let sep = ',';
//	    if(concatenated = '') then
//        let sep = '';
//    endif
//	    let concatenated = concatenated & sep & account;
//    let currentCount = currentCount + 1;
//	  	// We don't actually need to handle splitting these into groups of 100 or less anymore as the connector does this internally
//  	// but have left this in for now.
//	if(currentCount >= 99 or i=($(noRows)-1)) then
//	
//		exit script;
//	
//		TwitterConnectorV2_UserLookupById:
//		LOAD
//			user_id as UserLookupById_user_id,
//			user_name as UserLookupById_user_name,
//			user_screen_name as UserLookupById_user_screen_name,
//			user_location as UserLookupById_user_location,
//			user_profile_image_url as UserLookupById_user_profile_image_url,
//			user_description as UserLookupById_user_description,
//			user_url as UserLookupById_user_url,
//			user_geo_enabled as UserLookupById_user_geo_enabled,
//			user_protected as UserLookupById_user_protected,
//			user_followers_count as UserLookupById_user_followers_count,
//			user_friends_count as UserLookupById_user_friends_count,
//			user_listed_count as UserLookupById_user_listed_count,
//			user_favourites_count as UserLookupById_user_favourites_count,
//			user_statuses_count as UserLookupById_user_statuses_count,
//			user_created_at as UserLookupById_user_created_at,
//			timestamp#(mid(user_created_at, 9, 2) & '-' & mid(user_created_at, 5, 3) & '-' & mid(user_created_at, 27, 4) & ' ' & mid(user_created_at, 12, 8), 'DD-MMM-YYYY hh:mm:ss') as UserLookupById_user_user_created_at_timestamp,
//			date#(mid(user_created_at, 9, 2) & '-' & mid(user_created_at, 5, 3) & '-' & mid(user_created_at, 27, 4), 'DD-MMM-YYYY') as UserLookupById_user_user_created_at_date,
//			time#(mid(user_created_at, 12, 8), 'hh:mm:ss') as UserLookupById_user_user_created_at_time,
//			user_utc_offset as UserLookupById_user_utc_offset,
//			user_time_zone as UserLookupById_user_time_zone,
//			user_verified as UserLookupById_user_verified,
//			user_lang as UserLookupById_user_lang,
//			user_follow_request_sent as UserLookupById_user_follow_request_sent,
//			user_is_translator as UserLookupById_user_is_translator,
//			user_following as UserLookupById_user_following,
//			user_notifications as UserLookupById_user_notifications,
//			status_id as UserLookupById_status_id,
//			status_created_at as UserLookupById_status_created_at,
//			timestamp#(mid(status_created_at, 9, 2) & '-' & mid(status_created_at, 5, 3) & '-' & mid(status_created_at, 27, 4) & ' ' & mid(status_created_at, 12, 8), 'DD-MMM-YYYY hh:mm:ss') as UserLookupById_status_status_created_at_timestamp,
//			date#(mid(status_created_at, 9, 2) & '-' & mid(status_created_at, 5, 3) & '-' & mid(status_created_at, 27, 4), 'DD-MMM-YYYY') as UserLookupById_status_status_created_at_date,
//			time#(mid(status_created_at, 12, 8), 'hh:mm:ss') as UserLookupById_status_status_created_at_time,
//			status_text as UserLookupById_status_text,
//			status_lang as UserLookupById_status_lang,
//			status_source as UserLookupById_status_source,
//			status_truncated as UserLookupById_status_truncated,
//			status_in_reply_to_screen_name as UserLookupById_status_in_reply_to_screen_name,
//			status_in_reply_to_status_id as UserLookupById_status_in_reply_to_status_id,
//			status_in_reply_to_user_id as UserLookupById_status_in_reply_to_user_id,
//			status_retweet_count as UserLookupById_status_retweet_count,
//			status_favorite_count as UserLookupById_status_favorite_count,
//			status_retweeted as UserLookupById_status_retweeted,
//			status_favorited as UserLookupById_status_favorited,
//			status_possibly_sensitive as UserLookupById_status_possibly_sensitive,
//			status_hashtag_count as UserLookupById_status_hashtag_count,
//			status_hash_tags as UserLookupById_status_hash_tags,
//			status_url_count as UserLookupById_status_url_count,
//			status_expanded_urls as UserLookupById_status_expanded_urls,
//			status_user_mentions_count as UserLookupById_status_user_mentions_count,
//			status_user_mentions as UserLookupById_status_user_mentions,
//			status_media_count as UserLookupById_status_media_count,
//			status_media_expanded_urls as UserLookupById_status_media_expanded_urls,
//			status_symbols_count as UserLookupById_status_symbols_count,
//			status_symbols as UserLookupById_status_symbols,
//			status_media_photo_count as UserLookupById_status_media_photo_count,
//			status_media_photo_urls as UserLookupById_status_media_photo_urls,
//			status_place_id as UserLookupById_status_place_id,
//			status_place_url as UserLookupById_status_place_url,
//			status_place_place_type as UserLookupById_status_place_place_type,
//			status_place_name as UserLookupById_status_place_name,
//			status_place_full_name as UserLookupById_status_place_full_name,
//			status_place_country_code as UserLookupById_status_place_country_code,
//			status_place_country as UserLookupById_status_place_country,
//			status_place_bounding_box_type as UserLookupById_status_place_bounding_box_type,
//			status_place_attributes as UserLookupById_status_place_attributes,
//			status_geo_type as UserLookupById_status_geo_type,
//			status_geo_latitude as UserLookupById_status_geo_latitude,
//			status_geo_longitude as UserLookupById_status_geo_longitude,
//			status_coordinates_type as UserLookupById_status_coordinates_type,
//			status_coordinates_latitude as UserLookupById_status_coordinates_latitude,
//			status_coordinates_longitude as UserLookupById_status_coordinates_longitude,
//			status_retweeted_status_id as UserLookupById_status_retweeted_status_id,
//			status_retweeted_status_created_at as UserLookupById_status_retweeted_status_created_at,
//			timestamp#(mid(status_retweeted_status_created_at, 9, 2) & '-' & mid(status_retweeted_status_created_at, 5, 3) & '-' & mid(status_retweeted_status_created_at, 27, 4) & ' ' & mid(status_retweeted_status_created_at, 12, 8), 'DD-MMM-YYYY hh:mm:ss') as UserLookupById_status_retweeted_status_status_retweeted_status_created_at_timestamp,
//			date#(mid(status_retweeted_status_created_at, 9, 2) & '-' & mid(status_retweeted_status_created_at, 5, 3) & '-' & mid(status_retweeted_status_created_at, 27, 4), 'DD-MMM-YYYY') as UserLookupById_status_retweeted_status_status_retweeted_status_created_at_date,
//			time#(mid(status_retweeted_status_created_at, 12, 8), 'hh:mm:ss') as UserLookupById_status_retweeted_status_status_retweeted_status_created_at_time,
//			status_retweeted_status_text as UserLookupById_status_retweeted_status_text,
//			status_retweeted_status_lang as UserLookupById_status_retweeted_status_lang,
//			status_retweeted_status_source as UserLookupById_status_retweeted_status_source,
//			status_retweeted_status_truncated as UserLookupById_status_retweeted_status_truncated,
//			status_retweeted_status_in_reply_to_screen_name as UserLookupById_status_retweeted_status_in_reply_to_screen_name,
//			status_retweeted_status_in_reply_to_status_id as UserLookupById_status_retweeted_status_in_reply_to_status_id,
//			status_retweeted_status_in_reply_to_user_id as UserLookupById_status_retweeted_status_in_reply_to_user_id,
//			status_retweeted_status_retweet_count as UserLookupById_status_retweeted_status_retweet_count,
//			status_retweeted_status_favorite_count as UserLookupById_status_retweeted_status_favorite_count,
//			status_retweeted_status_retweeted as UserLookupById_status_retweeted_status_retweeted,
//			status_retweeted_status_favorited as UserLookupById_status_retweeted_status_favorited,
//			status_retweeted_status_possibly_sensitive as UserLookupById_status_retweeted_status_possibly_sensitive,
//			status_retweeted_status_hashtag_count as UserLookupById_status_retweeted_status_hashtag_count,
//			status_retweeted_status_hash_tags as UserLookupById_status_retweeted_status_hash_tags,
//			status_retweeted_status_url_count as UserLookupById_status_retweeted_status_url_count,
//			status_retweeted_status_expanded_urls as UserLookupById_status_retweeted_status_expanded_urls,
//			status_retweeted_status_user_mentions_count as UserLookupById_status_retweeted_status_user_mentions_count,
//			status_retweeted_status_user_mentions as UserLookupById_status_retweeted_status_user_mentions,
//			status_retweeted_status_media_count as UserLookupById_status_retweeted_status_media_count,
//			status_retweeted_status_media_expanded_urls as UserLookupById_status_retweeted_status_media_expanded_urls,
//			status_retweeted_status_symbols_count as UserLookupById_status_retweeted_status_symbols_count,
//			status_retweeted_status_symbols as UserLookupById_status_retweeted_status_symbols,
//			status_retweeted_status_media_photo_count as UserLookupById_status_retweeted_status_media_photo_count,
//			status_retweeted_status_media_photo_urls as UserLookupById_status_retweeted_status_media_photo_urls,
//			status_retweeted_status_place_id as UserLookupById_status_retweeted_status_place_id,
//			status_retweeted_status_place_url as UserLookupById_status_retweeted_status_place_url,
//			status_retweeted_status_place_place_type as UserLookupById_status_retweeted_status_place_place_type,
//			status_retweeted_status_place_name as UserLookupById_status_retweeted_status_place_name,
//			status_retweeted_status_place_full_name as UserLookupById_status_retweeted_status_place_full_name,
//			status_retweeted_status_place_country_code as UserLookupById_status_retweeted_status_place_country_code,
//			status_retweeted_status_place_country as UserLookupById_status_retweeted_status_place_country,
//			status_retweeted_status_place_bounding_box_type as UserLookupById_status_retweeted_status_place_bounding_box_type,
//			status_retweeted_status_place_attributes as UserLookupById_status_retweeted_status_place_attributes,
//			status_retweeted_status_geo_type as UserLookupById_status_retweeted_status_geo_type,
//			status_retweeted_status_geo_latitude as UserLookupById_status_retweeted_status_geo_latitude,
//			status_retweeted_status_geo_longitude as UserLookupById_status_retweeted_status_geo_longitude,
//			status_retweeted_status_coordinates_type as UserLookupById_status_retweeted_status_coordinates_type,
//			status_retweeted_status_coordinates_latitude as UserLookupById_status_retweeted_status_coordinates_latitude,
//			status_retweeted_status_coordinates_longitude as UserLookupById_status_retweeted_status_coordinates_longitude
//		FROM
//		[http://localhost:5555/QVSource/TwitterConnectorV2/?table=UserLookupById&appID=&userIds=14320752]
//		(qvx);
//
//	endif
//
//endif